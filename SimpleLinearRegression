import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd

advertisement = pd.open_csv("advertisement.csv")
advertisement.head(5)
advertisement.info() #same as table describe
advertisement.describe() #displays aggregate max,min,percentile

import matplotlib.pyplot as plt
import seaborn as sns

sns.plot(advertisement,x_vars=["TV","Newspaper","Radio"], y_vars= ["Sales"],size=4,kind="scatter")
plt.show()

#highly correlated factors
x = advertisement["TV"]
y = advertisement["Sales"]

from sklearn import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.70,test_size=0.30,random=100)

#predictive model fit
import statsmodel.api as sm
x_train_sm = sm.add_constant = (x_train)
lr = sm.OLS(y_train,x_train_sm).fit()

lr.params()
print(lr.summary())

c = 6.948 #coefficient 
m = 0.054  #coefficient of TV

# Visualise the fit is significant
plt.scatter(x_train,y_train)
plt.plot(x_train, c + m * x_train, 'r')
plt.show()

#Check error residue in the model
y_train_pred = lr.predict(x_train_sm)
res = (y_train - y_train_pred)

fig = plt.figure()
sns.distplot(res,bin=15) #Residual Error plot 
fig.suptitle("Some Error Title")
plt.xlabel('y_train - y_train_pred', fontsize = 10)
plt.show()

#Looking for pattern in the residual
plot.scatter(x_train,res)
plt.show()



#Prediction on test model
x_test_sm = sm.add_constant(x_test)
y_pred = lr.predict(x_test_sm)



from sklearn.matrices import mean_squared_error
from sklearn.matrices import r2_score

np.sqrt(mean_squared_error(y_test,y_pred))
r_squared = r2_score(y_test,y_pred)

#Visualising the fix on test 
plt.scatter(x_test, c + m * x_test, 'r')
plt.show()








